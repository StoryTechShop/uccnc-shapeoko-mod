/**
 * Macro: M90000 ATC Air Seal
 * Monitors Spindle, Coolant, VFD and ATC activity, enabling the air seal with a delay to turn back off
 * Used as Autorun Macroloop
 */

// ### M90000 CONFIG ###

// Delay in seconds before turning air seal off
var atcAirSealOffDelaySecs = 3;

// OUTPUT to engage air seal
var atcOutputAirSeal = new PortPin(3, 4);
var atcLEDAirSeal = 89; // OutputPT3PN4

// LEDs (INPUT) to monitor
var LEDs = new []{
    new {Num = 50, State = true},	// SpindleCW M3
    new {Num = 51, State = true},	// SpindleCCW M4
    new {Num = 52, State = true}, 	// Miston M7
    new {Num = 53, State = true}, 	// Floodon M8
    new {Num = 86, State = true}, 	// OutputPT3PN1 ATC Release
    new {Num = 88, State = true}, 	// OutputPT3PN3 ATC Purge
    new {Num = 95, State = false},	// OutputPT3PN10 VFD Running - Inverted Signal (false)
};

// ### M90000 MACROLOOP ###

DateTime atcSealOnSince = DateTime.UtcNow;

while(loop && !exec.Ismacrostopped()) {

    if(
        // Check if any LEDs equal the expected state for air to be on
        Array.FindIndex(LEDs, led => exec.GetLED(led.Num) == led.State) > -1
        && exec.GetLED(atcLEDAirSeal) != true
    ){
        exec.Setoutpin(atcOutputAirSeal.Port, atcOutputAirSeal.Pin);
        atcSealOnSince = DateTime.UtcNow;
    }else if(
        exec.GetLED(atcLEDAirSeal) != false
    ){
        // Delay turning off ATC Seal by 3 seconds
        TimeSpan elapsed = DateTime.UtcNow - atcSealOnSince;
        if(elapsed.TotalSeconds > atcAirSealOffDelaySecs){
            exec.Clroutpin(atcOutputAirSeal.Port, atcOutputAirSeal.Pin);
        }
    }

    Thread.Sleep(50);
}

// Turn off ATC Seal on stop
exec.Clroutpin(atcOutputAirSeal.Port, atcOutputAirSeal.Pin);

#Events
// ### GLOBAL UTILS ###

private struct PortPin {
    public PortPin(int port, int pin) {
        this.Port = port;
        this.Pin = pin;
    }

    public int Port;
    public int Pin;
}